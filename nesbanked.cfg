# https://github.com/sehugg/8bitworkshop/issues/186
# https://github.com/seanwiththebeard/8bitworkshop_MMC3_siegegame

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0500; # 5 pages stack
}
MEMORY {
    ZP:     file = "", start = $0002, size = $00FE, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    #ROM Banks @ $8000
    PRGA_0: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_1: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_2: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_3: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_4: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_5: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_6: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_7: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_8: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_9: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_10: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_11: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_12: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_13: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_14: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_15: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_16: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_17: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_18: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_19: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_20: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_21: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_22: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_23: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_24: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_25: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_26: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_27: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_28: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_29: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_30: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;    

    #ROM Banks @ $a000
    PRGB_0: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_1: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_2: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_3: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_4: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_5: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_6: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_7: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_8: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_9: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_10: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_11: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_12: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_13: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_14: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_15: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_16: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_17: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_18: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_19: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_20: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_21: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_22: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_23: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_24: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_25: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_26: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_27: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_28: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_29: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_30: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;    

    # fixed 16K ROM banks @ $c000
    PRG_FIXED: start = $c000, size = $2000, file = %O ,fill = yes, define = yes;
    # final bank has 
    # - startup
    # - code
    # - vectors
    PRG_LAST:    file = %O, start = $E000, size = $1FFA, fill = yes, define = yes;
    VECTORS: file = %O, start = $FFFA, size = $0006, fill = yes;

    # 8 8k CHR Banks (64k)
    CHR:   file = %O, start = $0000, size = $40000, fill = yes;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0500 3 pages for ppu memory write buffer
    # $0500-$0800 3 pages for cc65 parameter stack
    RAM:   file = "", start = $0300, size = __STACKSIZE__, define = yes;

    # additional 8K SRAM Bank
    # - data (run)
    # - bss
    # - heap
    SRAM:    file = "", start = $6000, size = $2000, define = yes;
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    HEADER:   load = HEADER,          type = ro;
    CODEA_0:    load = PRGA_0,            type = ro,  define   = yes, optional = yes;
    CODEA_1:    load = PRGA_1,            type = ro,  define   = yes, optional = yes;
    CODEA_2:    load = PRGA_2,            type = ro,  define   = yes, optional = yes;
    CODE_FIXED:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    RODATA:   load = PRG_FIXED,            type = ro,  define   = yes;
    ONCE:     load = PRG_FIXED,            type = ro,  optional = yes;
    DATA:     load = PRG_FIXED, run = RAM, type = rw,  define   = yes;
    STARTUP:  load = PRG_FIXED,            type = ro,  define   = yes;
    CODE:     load = PRG_LAST,            type = ro,  define   = yes;
    VECTORS:  load = VECTORS,         type = ro;
    CHARS:    load = CHR,             type = ro;
    BSS:      load = SRAM,            type = bss, define   = yes;
    XRAM:     load = SRAM, run = SRAM, type = rw,  define   = yes, optional = yes;
    
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
